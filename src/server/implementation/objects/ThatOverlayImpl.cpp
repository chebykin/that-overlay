/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include <ThatOverlayImplFactory.hpp>
#include "ThatOverlayImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

#define GST_CAT_DEFAULT kurento_that_overlay_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoThatOverlayImpl"

namespace kurento
{
namespace module
{
namespace thatoverlay
{

ThatOverlayImpl::ThatOverlayImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline)  : FilterImpl (config, std::dynamic_pointer_cast<MediaObjectImpl>(mediaPipeline)) 
{
  GstElement* sampleplugin;

  g_object_set (element, "filter-factory", "thatoverlay", NULL);

  g_object_get (G_OBJECT (element), "filter", &sampleplugin, NULL);

  if (sampleplugin == NULL) {
    throw KurentoException (MEDIA_OBJECT_NOT_AVAILABLE,
                            "Media Object not available");
  }

  g_object_unref (sampleplugin);
}

MediaObjectImpl *
ThatOverlayImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new ThatOverlayImpl (config, mediaPipeline);
}

ThatOverlayImpl::StaticConstructor ThatOverlayImpl::staticConstructor;

ThatOverlayImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

} /* thatoverlay */
} /* module */
} /* kurento */
