/* Autogenerated with kurento-module-creator */

#ifndef __THAT_OVERLAY_IMPL_HPP__
#define __THAT_OVERLAY_IMPL_HPP__

#include "FilterImpl.hpp"
#include "ThatOverlay.hpp"
#include <EventHandler.hpp>
#include <boost/property_tree/ptree.hpp>

namespace kurento
{
namespace module
{
namespace thatoverlay
{
class ThatOverlayImpl;
} /* thatoverlay */
} /* module */
} /* kurento */

namespace kurento
{
void Serialize (std::shared_ptr<kurento::module::thatoverlay::ThatOverlayImpl> &object, JsonSerializer &serializer);
} /* kurento */

namespace kurento
{
class MediaPipelineImpl;
} /* kurento */

namespace kurento
{
namespace module
{
namespace thatoverlay
{

class ThatOverlayImpl : public FilterImpl, public virtual ThatOverlay
{

public:

  typedef struct {
    double r, g, b, a;
  } RGBA;

  typedef struct {
    gboolean valid;
    int width;
    int height;
    int frame;

    std::string title, titleFont, watermark, watermarkFont;
    RGBA titleColor, watermarkColor;
    int watermarkInterval;
  } CairoOverlayState;

  ThatOverlayImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline);

  virtual ~ThatOverlayImpl () {};

  /* Next methods are automatically implemented by code generator */
  virtual bool connect (const std::string &eventType, std::shared_ptr<EventHandler> handler);
  virtual void invoke (std::shared_ptr<MediaObjectImpl> obj,
                       const std::string &methodName, const Json::Value &params,
                       Json::Value &response);

  virtual void Serialize (JsonSerializer &serializer);

private:

  class StaticConstructor
  {
  public:
    StaticConstructor();
  };

  CairoOverlayState st;

  static StaticConstructor staticConstructor;

};

} /* thatoverlay */
} /* module */
} /* kurento */

#endif /*  __THAT_OVERLAY_IMPL_HPP__ */
